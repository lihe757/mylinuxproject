//============================================================================
// Name        : SoundAnalysis.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include "stdio.h"
namespace SoundAnalysis{
public static class FftAlgorithm
   {
   public static double[] Calculate(double[] x)
           {
               int length;
               int bitsInLength;
               if (IsPowerOfTwo(x.Length))
               {
                   length = x.Length;
                   bitsInLength = Log2(length) - 1;
               }
               else
               {
                   bitsInLength = Log2(x.Length);
                   length = 1 << bitsInLength;
                   // the items will be pad with zeros
               }

               // bit reversal
               ComplexNumber[] data = new ComplexNumber[length];
               for (int i = 0; i < x.Length; i++)
               {
                   int j = ReverseBits(i, bitsInLength);
                   data[j] = new ComplexNumber(x[i]);
               }

               // Cooley-Tukey
               for (int i = 0; i < bitsInLength; i++)
               {
                   int m = 1 << i;
                   int n = m * 2;
                   double alpha = -(2 * Math.PI / n);

                   for (int k = 0; k < m; k++)
                   {
                       // e^(-2*pi/N*k)
                       ComplexNumber oddPartMultiplier = new ComplexNumber(0, alpha * k).PoweredE();

                       for (int j = k; j < length; j += n)
                       {
                           ComplexNumber evenPart = data[j];
                           ComplexNumber oddPart = oddPartMultiplier * data[j + m];
                           data[j] = evenPart + oddPart;
                           data[j + m] = evenPart - oddPart;
                       }
                   }
               }

               // calculate spectrogram
               double[] spectrogram = new double[length];
               for (int i = 0; i < spectrogram.Length; i++)
               {
                   spectrogram[i] = data[i].AbsPower2();
               }
               return spectrogram;
           }
   };

}
